#+export_file_name: org-web-track.texi
#+texinfo_filename: org-web-track.info
#+texinfo_dir_category: Emacs
#+texinfo_dir_title: Org Web Track: (org-web-track)
#+texinfo_dir_desc: An Elisp package to help users keep track of data snippets from web pages in Org Mode
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/p-snow/org-web-track,website}
#+texinfo_header: @set MAINTAINER p-snow
#+texinfo_header: @set MAINTAINEREMAIL @email{public@p-snow.org}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:public@p-snow.org,contact the maintainer}

#+texinfo: @insertcopying

* Org Web Track

=org-web-track= is an Elisp package for org-mode that provides commands and functions to assist users in keeping track of data snippets from web pages that may change over time, such as scores, prices, or states.

1. tracking support
 org-web-track retrieves data based on a user-defined URL and selector, which indicate where to access and from which location to gather the data, respectively. Once they are set appropriately, org-web-track looks up on demand and updates the value.

2. comprehensible data display
 In the context of org-web-track, an org entry with a URL is considered a tracking item. org-web-track offers a specialized column view for reviewing a group of tracking items, including their current values and updated time.

3. data log utilization
 org-web-track logs all updates and provides a command to create an org table that shows data transitions in ascending order of time. Users can utilize the table in various ways, including for data analysis and visualization.

=org-web-track= is currently under development. Use it at your own risk.

* Installation
:PROPERTIES:
:CREATED:  [2023-06-16 Fri 09:56]
:END:
** Requirements
:PROPERTIES:
:CREATED:  [2023-06-16 Fri 10:20]
:END:

- Emacs 29.1 or higher
- [[https://github.com/tkf/emacs-request][request.el]] v0.3.2
- [[https://github.com/zweifisch/enlive][enlive]] v0.0.1

** How to install
:PROPERTIES:
:CREATED:  [2023-06-25 Sun 20:55]
:END:

=org-web-track= has not yet been registered in any official package archives. Please consider installing it manually or from my own ELPA using the following steps.

1. Add p-snow's archive to your package-archives list
   #+begin_src emacs-lisp
   (require 'package)
   (add-to-list 'package-archives '("p-snow" . "https://p-snow.org/packages/"))
   #+end_src
2. Refresh package list
   Use the command M-x package-refresh-contents after updating the archives to download a listing of packages in the archives.
3. Install org-web-track
   Install org-web-track as you would any other package: via use-package statements, M-x list-packages, or any other way.

* Terminology
:PROPERTIES:
:CREATED:  [2024-03-17 Sun 19:04]
:END:

- Selector

- Tracking Files


* Usage
:PROPERTIES:
:CREATED:  [2023-06-16 Fri 09:56]
:END:
** Basic data tracking workflow
:PROPERTIES:
:CREATED:  [2023-06-16 Fri 10:37]
:END:

1. Setup selectors

   #+begin_src text :exports none
     Users must define selectors when creating tracking items. A selector specifies where to capture data within a specific URL.
   #+end_src
   The variable =org-web-track-selector-alist= is used to define a list of selection conditions in the (URL-MATCH . SELECTOR) format. If a tracking item has a URL that matches URL-MATCH, the SELECTOR is applied to the response for that URL to capture data.

   #+begin_src org :exports none
     SELECTOR is either a vector, a function or a string. The vector denotes a CSS selector(See [[https://github.com/zweifisch/enlive#start-of-content][enlive]]). The function will be called in a temporary buffer where HTML document is inserted. The string is meant to be a shell command invoked with piped HTML string.
   #+end_src
   SELECTOR can take on one of three forms: a vector, a function, or a string. If a vector is provided, it should represent a CSS selector. If a function is provided, it will be called with a temporary buffer containing the HTML document. If a string is provided, it should represent a shell command that will be invoked with the HTML string piped in.
2. Creating tracking items

   #+begin_src text :exports none
     A tracking item in =org-web-track= is represented as a single org entry.
     User needs to create an org entry first then invoke org-web-track-setup to set a tracking URL and execute initial data tracking.
   #+end_src
   To track an item in =org-web-track=, the user needs to create an org entry first and then use =org-web-track-setup= to set a tracking URL and carry out initial data tracking.
3. Updating data

   #+begin_src text :exports none
     User can update data by invoking org-web-track-update in the desired org entry. If data update is detected, org-web-track logs a new record with updated data and timestamp. They have the other option to update all tracking items in org-web-track-files by calling org-web-track-update-all.
   #+end_src
   Users can update a specific org entry by invoking =org-web-track-update=. If any updates are detected, =org-web-track= logs a new record with the updated data and a timestamp. Alternatively, users can update all tracking items in =org-web-track-files= by calling =org-web-track-update-all=.

* License                                                          :noexport:

GPLv3
