\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename org-web-track.info
@settitle 
@documentencoding UTF-8
@documentlanguage ja
@set MAINTAINERSITE @uref{https://github.com/p-snow/org-web-track,website}
@set MAINTAINER p-snow
@set MAINTAINEREMAIL @email{public@p-snow.org}
@set MAINTAINERCONTACT @uref{mailto:public@p-snow.org,contact the maintainer}
@c %**end of header

@dircategory Emacs
@direntry
* Org Web Track: (org-web-track). An Elisp package to help users keep track of data snippets from web pages in Org Mode.
@end direntry

@finalout
@titlepage
@title 
@end titlepage

@ifnottex
@node Top
@top 

@insertcopying
@end ifnottex

@menu
* Org Web Track::
* Installation::
* Terminology::
* Usage::

@detailmenu
--- The Detailed Node Listing ---

Installation

* Requirements::
* How to install::

Usage

* Basic data tracking workflow::

@end detailmenu
@end menu

@node Org Web Track
@unnumbered Org Web Track

@samp{org-web-track} is an Elisp package for org-mode that provides commands and functions to assist users in keeping track of data snippets from web pages that may change over time, such as scores, prices, or states.

@enumerate
@item
tracking support
org-web-track retrieves data based on a user-defined URL and selector, which indicate where to access and from which location to gather the data, respectively. Once they are set appropriately, org-web-track looks up on demand and updates the value.

@item
comprehensible data display
In the context of org-web-track, an org entry with a URL is considered a tracking item. org-web-track offers a specialized column view for reviewing a group of tracking items, including their current values and updated time.

@item
data log utilization
org-web-track logs all updates and provides a command to create an org table that shows data transitions in ascending order of time. Users can utilize the table in various ways, including for data analysis and visualization.
@end enumerate

@samp{org-web-track} is currently under development. Use it at your own risk.

@node Installation
@unnumbered Installation

@menu
* Requirements::
* How to install::
@end menu

@node Requirements
@unnumberedsec Requirements

@itemize
@item
Emacs 28.1 or higher
@item
Org-mode 9.5 or higher
@item
@uref{https://github.com/tkf/emacs-request, request.el} v0.3.2
@item
@uref{https://github.com/zweifisch/enlive, enlive} v0.0.1
@end itemize

@node How to install
@unnumberedsec How to install

@samp{org-web-track} has not yet been registered in any official package archives. Please consider installing it manually or from my own ELPA using the following steps.

@enumerate
@item
Add p-snow's archive to your package-archives list
@lisp
(require 'package)
(add-to-list 'package-archives '("p-snow" . "https://p-snow.org/packages/"))
@end lisp
@item
Refresh package list
Use the command M-x package-refresh-contents after updating the archives to download a listing of packages in the archives.
@item
Install org-web-track
Install org-web-track as you would any other package: via use-package statements, M-x list-packages, or any other way.
@end enumerate

@node Terminology
@unnumbered Terminology

@itemize
@item
Selector

@item
Tracking Files
@end itemize

@node Usage
@unnumbered Usage

@menu
* Basic data tracking workflow::
@end menu

@node Basic data tracking workflow
@unnumberedsec Basic data tracking workflow

@enumerate
@item
Setup selectors

The variable @samp{org-web-track-selector-alist} is used to define a list of selection conditions in the (URL-MATCH . SELECTOR) format. If a tracking item has a URL that matches URL-MATCH, the SELECTOR is applied to the response for that URL to capture data.

SELECTOR can take on one of three forms: a vector, a function, or a string. If a vector is provided, it should represent a CSS selector. If a function is provided, it will be called with a temporary buffer containing the HTML document. If a string is provided, it should represent a shell command that will be invoked with the HTML string piped in.
@item
Creating tracking items

To track an item in @samp{org-web-track}, the user needs to create an org entry first and then use @samp{org-web-track-setup} to set a tracking URL and carry out initial data tracking.
@item
Updating data

Users can update a specific org entry by invoking @samp{org-web-track-update}. If any updates are detected, @samp{org-web-track} logs a new record with the updated data and a timestamp. Alternatively, users can update all tracking items in @samp{org-web-track-files} by calling @samp{org-web-track-update-all}.
@end enumerate

@bye
